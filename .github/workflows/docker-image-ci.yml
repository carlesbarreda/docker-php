name: Docker Image CI
on:
  schedule:
    - cron: '00 23 * * 0'

  push:
    branches: [ "dev" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

  #pull_request:
  #  branches: [ "main" ]

  #pull_request:
  #  branches:
  #    - main
  #

  release:
      types: [published]

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: carlesbarreda/php
  exists: false
  BUILD: false
  COMMIT: false
  AUTHORS: docker@carlesbarreda.cat
  VENDOR: Carles Barreda
  GIT_NAME: Carles Barreda
  GIT_MAIL: 9409275+carlesbarreda@users.noreply.github.com

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  pusher:
    name: Build and push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [bullseye,alpine]
        #os: [alpine,alpine3.16,alpine3.17,buster,bullseye]
        #platform: [amd64,arm64/v8,arm/v7]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Last Docker Image Release
        run: |
          TAGS=$(curl -s 'https://hub.docker.com/v2/repositories/library/php/tags/?page_size=100&page=1&name=fpm-alpine' | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"fpm-alpine"/ { print $2 }' | head -1)
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | cut -d":" -f1 | cut -d"\"" -f2 | cut -d"-" -f1 | grep -v fpm | sort -r | head -1)
          #RELEASE=8.1.16
          #RELEASE=8.0.28
          RELEASE=7.4.33
          [ -f VERSION ] && VERSION=$(cat VERSION) || VERSION=""
          [ "$RELEASE" == "$VERSION" ] && exists='true' || exists='false'
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "exists=$exists" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=${{ env.BUILD }}
          [[ '${{ env.exists }}' != 'true' || '${{ steps.checkTag.outputs.exists }}' != 'true' ]] && BUILD='true'
          [[ '${{ github.event_name }}' == 'push' ]] && BUILD='true'
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: env.BUILD == 'true'
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          #version: v0.9.1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-image
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.RELEASE }}-fpm-${{ matrix.os }}
            ${{ env.RELEASE }}
            latest
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build images
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.${{ matrix.os }}
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7
          tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.version'] }}
            BASEIMAGE=${{ matrix.os }}
            REVISION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true

  tag:
    name: Update VERSION and create tag
    runs-on: ubuntu-latest
    needs: [pusher]
    #strategy:
    #  matrix:
    #    os: [bullseye,alpine]
    #    #os: [alpine,alpine3.16,alpine3.17,buster,bullseye]
    #    #platform: [amd64,arm64/v8,arm/v7]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Last Docker Image Release
        run: |
          TAGS=$(curl -s 'https://hub.docker.com/v2/repositories/library/php/tags/?page_size=100&page=1&name=fpm-alpine' | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"fpm-alpine"/ { print $2 }' | head -1)
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | cut -d":" -f1 | cut -d"\"" -f2 | cut -d"-" -f1 | grep -v fpm | sort -r | head -1)
          [ -f VERSION ] && VERSION=$(cat VERSION) || VERSION=""
          [ "$RELEASE" == "$VERSION" ] && exists='true' || exists='false'
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "exists=$exists" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=${{ env.BUILD }}
          [[ '${{ env.exists }}' != 'true' || '${{ steps.checkTag.outputs.exists }}' != 'true' ]] && BUILD='true'
          [[ '${{ github.event_name }}' == 'push' ]] && BUILD='true'
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      - name: Update VERSION file
        if: env.exists != 'true'
        run: |
          echo "${{ env.RELEASE }}" > VERSION
          echo "COMMIT=true" >> $GITHUB_ENV

      - name: Commit Changes
        if: env.COMMIT == 'true'
        run: |
          git config --global user.name '${{ env.GIT_NAME }}'
          git config --global user.email '${{ env.GIT_MAIL }}'
          git add .
          git commit -am "Automated changes"
          git push

      - name: Create tag
        if: steps.checkTag.outputs.exists != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.RELEASE }}",
              sha: context.sha
            })