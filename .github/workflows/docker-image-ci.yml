name: Docker Image CI
on:
  schedule:
    - cron: '00 23 * * 0'

  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

  #pull_request:
  #  branches: [ "main" ]

  #pull_request:
  #  branches:
  #    - main
  #

  release:
    types: [published]

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: carlesbarreda/php
  PLATFORMS: linux/amd64,linux/arm64/v8,linux/arm/v7
  LATEST_OS: alpine
  LATEST_VER: '8.3'

permissions:
  contents: write
  packages: write
  id-token: write

# Error build 8.3 with imagick extension
# Transient Error when Building Imagick in php 8.3.x on amd64 on alpine #643
# https://github.com/Imagick/imagick/issues/643

# https://docs.docker.com/build/ci/github-actions/cache/#local-cache
# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
# https://docs.docker.com/reference/cli/docker/buildx/build/#output
# https://github.com/docker/metadata-action?tab=readme-ov-file#outputs
# https://github.com/marketplace/actions/aqua-security-trivy#using-trivy-with-github-code-scanning
# https://stackoverflow.com/questions/59810838/how-to-get-the-short-sha-for-the-github-workflow
# https://docs.github.com/en/actions/learn-github-actions/contexts#github-context

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #version: ['7.4','8.0','8.1','8.2','8.3']
        #os: [alpine,alpine3.16,alpine3.17,buster,bullseye,bookworm]
        #platform: [amd64,arm64/v8,arm/v7]
        #version: ['7.4','8.0']
        #os: [bullseye,alpine]
        os: [bullseye,bookworm,alpine]
        #version: ['8.1','8.2','8.3']
        version: ['8.1']
        platform: [linux/amd64,linux/arm64/v8,linux/arm/v7]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Last Docker Image Release
        run: |
          TAGS=$(curl -s 'https://hub.docker.com/v2/repositories/library/php/tags/?page_size=10000&page=1&name=${{ matrix.version }}%25-fpm-${{ matrix.os }}' | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"${{ matrix.version }}-fpm-${{ matrix.os }}"/ { print $2 }' | head -1)
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | cut -d":" -f1 | cut -d"\"" -f2 | cut -d"-" -f1 | grep -v fpm | sort -r | head -1)
          [ ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER }} ] && echo "LATEST=$RELEASE" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=false
          LATEST_BUILD=false
          [[ ${{ steps.checkTag.outputs.exists != true }} ]] && BUILD=true
          [[ '${{ github.event_name }}' == 'push' ]] && BUILD=true
          [[ '${{ github.event_name }}' == 'pull_request' ]] && BUILD=false
          [[ ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER }} ]] && LATEST_BUILD=$BUILD
          echo "LATEST_BUILD=$LATEST_BUILD" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: env.BUILD == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # https://github.com/marketplace/actions/cache
      # https://github.com/actions/cache
      # https://docs.docker.com/build/ci/github-actions/cache/#local-cache
      #- name: Cache Docker layers
      #  if: env.BUILD == 'true'
      #  uses: actions/cache@v4
      #  id: cache
      #  env:
      #    cache-name: cache-buildx
      #  with:
      #    path: /tmp/.buildx-cache
      #    key: ${{ runner.os }}-buildx-${{ matrix.version }}-fpm-${{ matrix.os }}-${{ github.sha }}
      #    restore-keys: |
      #      ${{ runner.os }}-buildx-${{ matrix.version }}-fpm-${{ matrix.os }}-

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true'
        uses: docker/login-action@v3
        with:
          #registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: env.BUILD == 'true'
        id: meta-image
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.RELEASE }}-fpm-${{ matrix.os }}
            ${{ matrix.version }}-fpm-${{ matrix.os }}
            ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER && 'latest' || '' }}
          labels: |
            org.opencontainers.image.authors=${{ secrets.AUTHORS }}
            org.opencontainers.image.vendor=${{ secrets.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build images
        if: env.BUILD == 'true'
        id: docker-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.version }}.${{ matrix.os }}
          platforms: ${{ matrix.platform }}
          #tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.version'] }}
            BASEIMAGE=${{ matrix.os }}
            REVISION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.revision'] }}
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          #push: true

      #- name: Move cache
      #  if: env.BUILD == 'true'
      #  run: |
      #    rm -rf /tmp/.buildx-cache
      #    mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Results
        run: |
          mkdir -p /tmp/${{ matrix.version }}-${{ matrix.os }}
          echo "BUILD=${{ env.BUILD }}" >> "/tmp/${{ matrix.version }}-${{ matrix.os }}/env"
          echo "RELEASE=${{ env.RELEASE }}" >> "/tmp/${{ matrix.version }}-${{ matrix.os }}/env"
          echo "LATEST_BUILD=${{ env.LATEST_BUILD }}" >> "/tmp/${{ matrix.version }}-${{ matrix.os }}/env"
          echo "LATEST=${{ env.LATEST }}" >> "/tmp/${{ matrix.version }}-${{ matrix.os }}/env"

      - name: Export digest
        if: env.BUILD == 'true'
        run: |
          mkdir -p /tmp/${{ matrix.version }}-${{ matrix.os }}/digests
          digest="${{ steps.docker-image.outputs.digest }}"
          touch "/tmp/${{ matrix.version }}-${{ matrix.os }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.version }}-${{ matrix.os }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/${{ matrix.version }}-${{ matrix.os }}/*
          if-no-files-found: error
          retention-days: 1

    #outputs:
    #  LATEST_BUILD: ${{ env.LATEST_BUILD }}
    #  LATEST: ${{ env.LATEST }}

  tag:
    name: Update VERSION and create tag
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        #version: ['7.4','8.0','8.1','8.2','8.3']
        #os: [alpine,alpine3.16,alpine3.17,buster,bullseye,bookworm]
        #platform: [amd64,arm64/v8,arm/v7]
        #version: ['7.4','8.0']
        os: [bullseye,alpine]
        #os: [bullseye,bookworm,alpine]
        version: ['8.1','8.2','8.3']
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/${{ matrix.version }}-${{ matrix.os }}
          pattern: ${{ matrix.version }}-${{ matrix.os }}-*
          merge-multiple: true

      - name: Get env
        run: |
          cat "/tmp/${{ matrix.version }}-${{ matrix.os }}/env" >> $GITHUB_ENV
          cat "/tmp/${{ matrix.version }}-${{ matrix.os }}/env"

      - name: Checkout code
        if: env.BUILD == 'true'
        uses: actions/checkout@v4

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: env.BUILD == 'true'
        id: meta-image
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.RELEASE }}-fpm-${{ matrix.os }}
            ${{ matrix.version }}-fpm-${{ matrix.os }}
            ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER && 'latest' || '' }}
          labels: |
            org.opencontainers.image.authors=${{ secrets.AUTHORS }}
            org.opencontainers.image.vendor=${{ secrets.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true'
        uses: docker/login-action@v3
        with:
          #registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create manifest list and push
        if: env.BUILD == 'true'
        working-directory: /tmp/${{ matrix.version }}-${{ matrix.os }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)          

      - name: Inspect image
        if: env.BUILD == 'true'
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta-image.outputs.version }}

      - name: Get Last Docker Image Release
        run: |
          [[ -f VERSION ]] && VERSION=$(cat VERSION) || VERSION=""
          [[ ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER && env.LATEST_BUILD }} && "${{ env.LATEST }}" != "" && "${{ env.LATEST }}" == $VERSION ]] && COMMIT=true || COMMIT=false
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV

      - name: Update VERSION file
        if: env.COMMIT == 'true'
        run: |
          echo "${{ env.LATEST }}" > VERSION

      - name: Commit & Push changes
        if: env.COMMIT == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -am "Automated changes"
          git push

      - name: Create tag
        if: env.COMMIT == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          #github-token: ${{ secrets.GITHUB_TOKEN  }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.LATEST }}",
              sha: context.sha
            })