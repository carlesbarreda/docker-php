name: Docker Image CI
on:
  schedule:
    - cron: '00 23 * * 0'

  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

  #pull_request:
  #  branches: [ "main" ]

  #pull_request:
  #  branches:
  #    - main
  #

  release:
      types: [published]

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  #IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: carlesbarreda/php
  exists: false
  BUILD: false
  COMMIT: false
  AUTHORS: docker@carlesbarreda.cat
  VENDOR: Carles Barreda
  GIT_NAME: Carles Barreda
  GIT_MAIL: 9409275+carlesbarreda@users.noreply.github.com
  PLATFORMS: linux/amd64,linux/arm64/v8,linux/arm/v7
  LATEST_OS: alpine
  LATEST_VER: '8.2'

permissions:
  contents: write
  packages: write
  id-token: write

# Error build 8.3 with imagick extension
# Transient Error when Building Imagick in php 8.3.x on amd64 on alpine #643
# https://github.com/Imagick/imagick/issues/643

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #version: ['7.4','8.0','8.1','8.2','8.3']
        #os: [alpine,alpine3.16,alpine3.17,buster,bullseye,bookworm]
        #platform: [amd64,arm64/v8,arm/v7]
        #version: ['7.4'] <-- without xdebug extension
        #version: ['8.0']
        #os: [bullseye,alpine]
        #version: ['8.1','8.2']
        version: ['8.3']
        os: [bullseye,bookworm,alpine]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Last Docker Image Release
        run: |
          TAGS=$(curl -s 'https://hub.docker.com/v2/repositories/library/php/tags/?page_size=10000&page=1&name=${{ matrix.version }}%25-fpm-${{ matrix.os }}' | jq '.results[] | {(.name): .images[].digest}')
          DIGEST=$(echo $TAGS | jq . | awk -F': ' '/"${{ matrix.version }}-fpm-${{ matrix.os }}"/ { print $2 }' | head -1)
          RELEASE=$(echo $TAGS | jq . | grep $DIGEST | cut -d":" -f1 | cut -d"\"" -f2 | cut -d"-" -f1 | grep -v fpm | sort -r | head -1)
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Check Tag Exists
        uses: mukunku/tag-exists-action@v1.6.0
        id: checkTag
        with: 
          tag: ${{ env.RELEASE }}

      - name: Check If Need Build
        run: |
          BUILD=${{ env.BUILD }}
          [[ '${{ steps.checkTag.outputs.exists }}' != 'true' ]] && BUILD='true'
          [[ '${{ github.event_name }}' == 'push' ]] && BUILD='true'
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: env.BUILD == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      # https://github.com/docker/setup-buildx-action
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378273495
      # https://github.com/docker/build-push-action/issues/755#issuecomment-1378680855
      - name: Set up Docker Buildx
        if: env.BUILD == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: env.BUILD == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-image
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.RELEASE }}-fpm-${{ matrix.os }}
            ${{ matrix.version }}-fpm-${{ matrix.os }}
            ${{ matrix.os == env.LATEST_OS && env.RELEASE || '' }}
            ${{ matrix.os == env.LATEST_OS && matrix.version || '' }}
            ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER && format('{0}-latest', matrix.version) || '' }}
            ${{ matrix.os == env.LATEST_OS && matrix.version == env.LATEST_VER && 'latest' || '' }}
          labels: |
            org.opencontainers.image.authors=${{ env.AUTHORS }}
            org.opencontainers.image.vendor=${{ env.VENDOR }}
            org.opencontainers.image.version=${{ env.RELEASE }}

      - name: Build images
        if: env.BUILD == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.os }}
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.version'] }}
            BASEIMAGE=${{ matrix.os }}
            REVISION=${{ fromJSON(steps.meta-image.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true
